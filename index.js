const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Telegram Bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
const formatTelegramMessage = (data) => {
  let message = 'üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –ì–∏–¥—Ä–æ –ú–ê–ö–° –°–µ—Ä–≤–∏–°*\n\n';
  
  if (data.name) message += `üë§ *–ò–º—è:* ${data.name}\n`;
  if (data.phone) message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${data.phone}\n`;
  if (data.email) message += `üìß *Email:* ${data.email}\n`;
  if (data.message) message += `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${data.message}\n`;
  if (data.service) message += `üîß *–£—Å–ª—É–≥–∞:* ${data.service}\n`;
  
  message += `\n‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}`;
  
  return message;
};

// Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
app.post('/api/send-form', async (req, res) => {
  try {
    const { name, phone, email, message, service } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone) {
      return res.status(400).json({ 
        success: false, 
        error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
      });
    }
    
    const telegramMessage = formatTelegramMessage({
      name, phone, email, message, service
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    await bot.sendMessage(process.env.TELEGRAM_CHAT_ID, telegramMessage, {
      parse_mode: 'Markdown'
    });
    
    res.json({ 
      success: true, 
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' 
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
    });
  }
});

// Endpoint –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
app.post('/api/callback', async (req, res) => {
  try {
    const { phone, name } = req.body;
    
    if (!phone) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }
    
    const message = `üîî *–ó–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞*\n\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}${name ? `\nüë§ *–ò–º—è:* ${name}` : ''}\n\n‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}`;
    
    await bot.sendMessage(process.env.TELEGRAM_CHAT_ID, message, {
      parse_mode: 'Markdown'
    });
    
    res.json({ 
      success: true, 
      message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' 
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
    });
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});